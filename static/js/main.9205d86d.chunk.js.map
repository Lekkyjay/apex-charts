{"version":3,"sources":["components/PopChart.js","App.js","serviceWorker.js","index.js"],"names":["PopChart","useState","chart","height","width","type","background","foreColor","plotOptions","bar","horizontal","xaxis","categories","fill","colors","dataLabels","enabled","title","text","align","margin","offsetY","style","fontSize","options","setOptions","name","data","series","class","onClick","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAyFeA,EAtFE,WACf,IADqB,EAqESC,mBApED,CAC3BC,MAAO,CACLC,OAAQ,IACRC,MAAO,OACPC,KAAM,MACNC,WAAY,UACZC,UAAW,QAEbC,YAAa,CACXC,IAAK,CACHC,YAAY,IAGhBC,MAAO,CACLC,WAAY,CACV,WACA,cACA,UACA,UACA,eACA,UACA,cACA,YACA,SACA,aAGJC,KAAM,CACJC,OAAQ,CAAC,YAEXC,WAAY,CACVC,SAAS,GAEXC,MAAO,CACLC,KAAM,kCACNC,MAAO,SACPC,OAAQ,GACRC,QAAS,GACTC,MAAO,CACLC,SAAU,WAxCK,mBAqEdC,EArEc,KAqELC,EArEK,OAsEOxB,mBAzBA,CAAC,CAC3ByB,KAAM,aACNC,KAAM,CACJ,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,YAzDiB,mBAsEdC,EAtEc,UAwErB,OACE,yBAAKC,MAAM,aACT,kBAAC,IAAD,CACEL,QAAWA,EACXI,OAAUA,EACVvB,KAAO,MACPF,OAAS,MACTC,MAAQ,SAEV,4BAAQ0B,QApBI,WACdL,EAAW,2BAAID,GAAL,IAAchB,YAAa,CACnCC,IAAK,CACHC,YAAac,EAAQhB,YAAYC,IAAIC,kBAiBvC,yB,MCxESqB,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9205d86d.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport Chart from \"react-apexcharts\";\r\n\r\nconst PopChart = () => {\r\n  const initialState_options = {\r\n    chart: {\r\n      height: 450,\r\n      width: \"100%\",\r\n      type: \"bar\",\r\n      background: \"#f4f4f4\",\r\n      foreColor: \"#333\"\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        horizontal: false\r\n      }\r\n    },\r\n    xaxis: {\r\n      categories: [\r\n        \"New York\",\r\n        \"Los Angeles\",\r\n        \"Chicago\",\r\n        \"Houston\",\r\n        \"Philadelphia\",\r\n        \"Phoenix\",\r\n        \"San Antonio\",\r\n        \"San Diego\",\r\n        \"Dallas\",\r\n        \"San Jose\"\r\n      ]\r\n    },\r\n    fill: {\r\n      colors: [\"#F44336\"]\r\n    },\r\n    dataLabels: {\r\n      enabled: false\r\n    },\r\n    title: {\r\n      text: \"Largest US Cities By Population\",\r\n      align: \"center\",\r\n      margin: 20,\r\n      offsetY: 20,\r\n      style: {\r\n        fontSize: \"25px\"\r\n      }\r\n    }\r\n  }\r\n\r\n  const initialState_series = [{\r\n    name: \"Population\",\r\n    data: [\r\n      8550405,\r\n      3971883,\r\n      2720546,\r\n      2296224,\r\n      1567442,\r\n      1563025,\r\n      1469845,\r\n      1394928,\r\n      1300092,\r\n      1026908\r\n    ]\r\n  }]\r\n\r\n  const onClick = () => {\r\n    setOptions({...options, plotOptions: {\r\n      bar: {\r\n        horizontal: !options.plotOptions.bar.horizontal\r\n      }\r\n    }})\r\n  }\r\n  \r\n  const [options, setOptions] = useState(initialState_options)\r\n  const [series, setSeries] = useState(initialState_series)\r\n\r\n  return (\r\n    <div class=\"container\">\r\n      <Chart \r\n        options = {options}\r\n        series = {series}\r\n        type = \"bar\"\r\n        height = \"450\"\r\n        width = \"100%\"\r\n      />\r\n      <button onClick={onClick}>Horizontal/Vertical</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PopChart\r\n","import React from 'react';\nimport PopChart from './components/PopChart';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PopChart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}